package JavaExp;
import java.util.Random;
class NumberManager{
	private int generatedNumber;
	private boolean numberGenerated=false;
	public synchronized void generateNumber() {
		generatedNumber=new Random().nextInt(99)+2;//to generate 99 numbers including and starting at 2
		System.out.println("Generated Random Number:"+generatedNumber);
		numberGenerated=true;
		notifyAll();
	}
	public synchronized void printEvenNumber() throws InterruptedException {
		while(!numberGenerated||generatedNumber %2!=0) {
			wait();
		}
		for(int i=2;i<=generatedNumber;i+=2) {
		System.out.print(i+" ");
		}
		System.out.println();
		numberGenerated=false;
	}
	public synchronized void printOddNumber() throws InterruptedException {
		while(!numberGenerated||generatedNumber==0) {
			wait();
		}
		for(int i=1;i<=generatedNumber;i+=2) {
		System.out.print(i+" ");
		}
		System.out.println();
		numberGenerated=false;
	}
}
class NumberGenerator extends Thread{
	NumberManager numberManager=new NumberManager();
	public NumberGenerator(NumberManager numberManager) {
		this.numberManager=numberManager;
	}
	public void run() {
		while(true) {
			numberManager.generateNumber();
			try {
				Thread.sleep(1000);
			}
			catch(InterruptedException e){
				e.printStackTrace();
				
		    }
		}
	}
}
class EvenPrinterThread extends Thread{
	NumberManager numberManager=new NumberManager();
	public EvenPrinterThread (NumberManager numberManager) {
		this.numberManager=numberManager;
	}
	public void run() {
		while(true) {
			try {
				numberManager.printEvenNumber();
			}
			catch(InterruptedException e) {
				e.printStackTrace();
			}
		}
	}
}
class OddPrinterThread extends Thread{
	NumberManager numberManager=new NumberManager();
	public OddPrinterThread (NumberManager numberManager) {
		this.numberManager=numberManager;
	}
	public void run() {
		while(true) {
			try {
				numberManager.printOddNumber();
			}
			catch(InterruptedException e) {
				e.printStackTrace();
			}
		}
	}
}
public class MultiThreadOddOrEvenDemo {
	public static void main(String [] args) {
		NumberManager numberManager=new NumberManager();
		NumberGenerator numberGenerator=new NumberGenerator(numberManager);
		EvenPrinterThread evenPrinterThread=new EvenPrinterThread(numberManager);
	    OddPrinterThread oddPrinterThread=new OddPrinterThread(numberManager);
		numberGenerator.start();
		evenPrinterThread.start();
		oddPrinterThread.start();
	}

}
